#!/bin/bash

# exit when any command fails
set -e

# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG

# echo an error message before exiting
trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

if [ ! -f /data/data/com.termux/files/usr/bin/tput ]; then
    pkg install ncurses-utils >> ~/.termux.log 2>&1
fi


function _spinner() {
    # $1 start/stop
    #
    # on start: $2 display message
    # on stop : $2 process exit status
    #           $3 spinner function pid (supplied from stop_spinner)

    local on_success="DONE"
    local on_fail="FAIL"
    local white="\e[1;37m"
    local green="\e[1;32m"
    local red="\e[1;31m"
    local nc="\e[0m"

    case $1 in
        start)
            # calculate the column where spinner and status msg will be displayed
            let column=$(tput cols)-${#2}-8
            # display message and position the cursor in $column column
            echo -ne ${2}
            printf "%${column}s"

            # start spinner
            i=1
            sp='\|/-'
            delay=${SPINNER_DELAY:-0.15}

            while :
            do
                printf "\b${sp:i++%${#sp}:1}"
                sleep $delay
            done
            ;;
        stop)
            if [[ -z ${3} ]]; then
                echo "spinner is not running.."
                exit 1
            fi

            kill $3 > /dev/null 2>&1

            # inform the user uppon success or failure
            echo -en "\b["
            if [[ $2 -eq 0 ]]; then
                echo -en "${green}${on_success}${nc}"
            else
                echo -en "${red}${on_fail}${nc}"
            fi
            echo -e "]"
            ;;
        *)
            echo "invalid argument, try {start/stop}"
            exit 1
            ;;
    esac
}

function start_spinner {
    # $1 : msg to display
    _spinner "start" "${1}" &
    # set global spinner pid
    _sp_pid=$!
    disown
}

function stop_spinner {
    # $1 : command exit status
    _spinner "stop" $1 $_sp_pid
    unset _sp_pid
}



print_center(){
    local x
    local y
    text="$*"
    x=$(( ($(tput cols) - ${#text}) / 2))
    echo -ne "\E[6n";read -sdR y; y=$(echo -ne "${y#*[}" | cut -d';' -f1)
    echo -ne "\033[${y};${x}f$*"
}

# main()

# clear the screen, put the cursor at line 10, and set the text color
# to light blue.
echo -ne "\\033[2J\033[10;1f\e[94m"

# do it!
print_center 'TERMUX SETUP'
echo -e "\n"
echo -e "\n"

if [[ "$OSTYPE" == "linux-gnu" ]]; then

         print_center "This script is for termux only."

echo -e "\n"
echo -e "\n"
         exit 0
fi

# begin script options

case "$1" in
        full)



# check if termux has already been set up.
if [ -f /data/data/com.termux/files/usr/etc/.termux.setup ];
     then
         print_center "Full setup already complete."
echo -e "\n"
echo -e "\n"
         exit 0
else
    print_center Starting Setup...
echo -e "\n"
echo -e "\n"
sleep 1
    print_center Running Scripts...
echo -e "\n"
echo -e "\n"



SLEEP_DURATION=${SLEEP_DURATION:=1}  # default to 1 second, use to speed up tests

progress-bar() {
  local duration
  local columns
  local space_available
  local fit_to_screen
  local space_reserved

  space_reserved=6   # reserved width for the percentage value
  duration=${1}
  columns=$(tput cols)
  space_available=$(( columns-space_reserved ))

  if (( duration < space_available )); then
  	fit_to_screen=1;
  else
    fit_to_screen=$(( duration / space_available ));
    fit_to_screen=$((fit_to_screen+1));
  fi

  already_done() { for ((done=0; done<(elapsed / fit_to_screen) ; done=done+1 )); do printf "â–‡"; done }
  remaining() { for (( remain=(elapsed/fit_to_screen) ; remain<(duration/fit_to_screen) ; remain=remain+1 )); do printf " "; done }
  percentage() { printf "| %s%%" $(( ((elapsed)*100)/(duration)*100/100 )); }
  clean_line() { printf "\r"; }

  for (( elapsed=1; elapsed<=duration; elapsed=elapsed+1 )); do
      already_done; remaining; percentage
      sleep "$SLEEP_DURATION"
      clean_line
  done
  clean_line
}


progress-bar 2
start_spinner


if [ -f /data/data/com.termux/files/usr/etc/motd ];
then
rm /data/data/com.termux/files/usr/etc/motd
fi


# Tier 1: requirements for the core build scripts in termux-packages/scripts/build/
PACKAGES="binutils-gold"	# Part of binutils which is dependency of clang.
PACKAGES+=" clang"			# C/C++ packages.
PACKAGES+=" file"			# Used in termux_step_massage().
PACKAGES+=" lzip"			# Used by tar to extract *.tar.lz source archives.
PACKAGES+=" patch"			# Used for applying patches on source code.
PACKAGES+=" python"			# Used buildorder.py core script.
PACKAGES+=" unzip"			# Used to extract *.zip source archives.

# Tier 2: requirements for building many other packages.
PACKAGES+=" asciidoc"
PACKAGES+=" autoconf"
PACKAGES+=" automake"
PACKAGES+=" bc"
PACKAGES+=" bison"
PACKAGES+=" cmake"
PACKAGES+=" ed"
PACKAGES+=" flex"
PACKAGES+=" gettext"
PACKAGES+=" git"
# PACKAGES+=" golang"
PACKAGES+=" gperf"
PACKAGES+=" help2man"
PACKAGES+=" libtool"
PACKAGES+=" m4"
PACKAGES+=" make"			# Used for all Makefile-based projects.
PACKAGES+=" ninja"			# Used by default to build all CMake projects.
PACKAGES+=" perl"
PACKAGES+=" pkg-config"
PACKAGES+=" protobuf"
PACKAGES+=" python2"
# PACKAGES+=" rust"
PACKAGES+=" texinfo"
PACKAGES+=" valac"

# Personal additions to package list

PACKAGES+=" vim-python"
PACKAGES+=" ncurses"
PACKAGES+=" libiconv"
PACKAGES+=" diffutils"
PACKAGES+=" nodejs"
PACKAGES+=" mlocate"
PACKAGES+=" wget"
PACKAGES+=" nodejs"
PACKAGES+=" bash-completion"
PACKAGES+=" termux-api"
PACKAGES+=" w3m"
PACKAGES+=" tmux"
PACKAGES+=" openssh"
PACKAGES+=" figlet"
PACKAGES+=" ncurses-utils"
PACKAGES+=" libjpeg-turbo"
PACKAGES+=" build-essential"
PACKAGES+=" screenfetch"
PACKAGES+=" libpng"
PACKAGES+=" termux-apt-repo"
PACKAGES+=" termux-create-package"
PACKAGES+=" poppler"
#PACKAGES+=" "
#PACKAGES+=" "
#PACKAGES+=" "
#PACKAGES+=" "
#PACKAGES+=" "

apt update >> ~/.termux.log 2>&1
apt dist-upgrade -y >> ~/.termux.log 2>&1
apt install -y $PACKAGES >> ~/.termux.log 2>&1

git config --global user.email "charles@voz.dev" >> ~/.termux.log 2>&1
git config --global user.name "vozdev" >> ~/.termux.log 2>&1
mkdir -p ~/gits >> ~/.termux.log 2>&1

# Vim setup

if [ ! -f /data/data/com.termux/files/home/.vim_runtime/install_awesome_vimrc.sh ];
     then

git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime \
    >> ~/.termux.log 2>&1

. ~/.vim_runtime/install_awesome_vimrc.sh >> ~/.termux.log 2>&1

curl -fLo ~/.vim_runtime/my_configs.vim \
    --create-dirs https://voz.dev/my_configs.vim >> ~/.termux.log 2>&1
fi


# Powerline Shell setup

pip install powerline-shell >> ~/.termux.log 2>&1
curl -fLo ~/.config/powerline-shell/config.json \
    --create-dirs https://voz.dev/config.json >> ~/.termux.log 2>&1
pip install speedtest-cli >> ~/.termux.log 2>&1

# .bashrc setup

cd && wget voz.dev/termuxbrc >> ~/.termux.log 2>&1
mv termuxbrc ~/.bashrc >> ~/.termux.log 2>&1

# SSH key setup

curl -fLo ~/.ssh/vkaints \
    --create-dirs https://voz.dev/vkaints >> ~/.termux.log 2>&1

curl -fLo ~/.ssh/vkaints.pub \
    --create-dirs https://voz.dev/vkaints.pub >> ~/.termux.log 2>&1


curl -fLo ~/.ssh/id_rsa \
    --create-dirs https://voz.dev/vkaints >> ~/.termux.log 2>&1

curl -fLo ~/.ssh/id_rsa.pub \
    --create-dirs https://voz.dev/vkaints.pub >> ~/.termux.log 2>&1

# set correct permissions
chmod 700 ~/.ssh
chmod 600 ~/.ssh/id_rsa
chmod 644 ~/.ssh/id_rsa.pub
chmod 600 ~/.ssh/vkaints
chmod 644 ~/.ssh/vkaints.pub

# start ssh agent in background

eval "$(ssh-agent -s)"

# add vkaints and id_rsa to ssh agent

ssh-add ~/.ssh/vkaints
ssh-add ~/.ssh/id_rsa


# Termux extra row setup

curl -fLo ~/.termux/termux.properties \
    --create-dirs https://voz.dev/termux.properties >> ~/.termux.log 2>&1

# Tmux setup

if [ -f /data/data/com.termux/files/home/.tmux/plugins/tpm/tpm ];
     then
         echo "" >> ~/.termux.log 2>&1
     else
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm >> ~/.termux.log 2>&1

curl -fLo ~/.tmux.conf \
    --create-dirs https://voz.dev/tmuxc >> ~/.termux.log 2>&1
fi
# Case insensitive tab completion.

echo 'set completion-ignore-case On' >> /data/data/com.termux/files/usr/etc/inputrc



# Font installation

if [ ! -f /data/data/com.termux/files/usr/bin/termux-style ];

     then


cd /data/data/com.termux/files/usr/share
curl voz.dev/termux-style.tar | tar x >> ~/.termux.log 2>&1
cd /data/data/com.termux/files/usr/share/figlet
curl voz.dev/figfonts.tar | tar x >> ~/.termux.log 2>&1
ln -s /data/data/com.termux/files/usr/share/termux-style/termux-style \
    /data/data/com.termux/files/usr/bin/termux-style >> ~/.termux.log 2>&1
fi

stop_spinner 0 >> ~/.termux.log 2>&1
termux-style


print_center SETUP COMPLETE

echo -e "\n"
echo -e "\n"


fi


touch /data/data/com.termux/files/home/.termux.setup-complete
ssh -T git@github.com
            ;;

        vim)
if [ -f ~/.vim_runtime/install_awesome_vimrc.sh ];
     then
         print_center "Vim setup already complete."
echo -e "\n"
echo -e "\n"
         exit 0
else


VIMPACKAGES="vim-python"
VIMPACKAGES+=" nodejs"


apt update
apt install -y $VIMPACKAGES

git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime

. ~/.vim_runtime/install_awesome_vimrc.sh

curl -fLo ~/.vim_runtime/my_configs.vim \
    --create-dirs https://voz.dev/my_configs.vim

fi
            ;;

        powerline)
if [ -f ~/.config/powerline-shell/config.json ];
     then
         print_center "Powerline setup already complete."
echo -e "\n"
echo -e "\n"
         exit 0
     else
# Powerline Shell setup

pip install powerline-shell
curl -fLo ~/.config/powerline-shell/config.json \
    --create-dirs https://voz.dev/config.json
     fi

            ;;
        style)
if [ -f /data/data/com.termux/files/usr/share/termux-style/termux-style ];
     then
         print_center "Font setup already complete."
echo -e "\n"
echo -e "\n"
         exit 0
     else

# Font installation

cd /data/data/com.termux/files/usr/share
curl voz.dev/termux-style.tar | tar x
cd /data/data/com.termux/files/usr/share/figlet
curl voz.dev/figfonts.tar | tar x
ln -s /data/data/com.termux/files/usr/share/termux-style/termux-style \
    /data/data/com.termux/files/usr/bin/termux-style
fi
            ;;

        *)
print_center $"Usage: termux-setup full | vim | powerline | style "
echo -e "\n"
echo -e "\n"
            exit 0

esac
